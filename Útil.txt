Initialize
git flow init [-fd]

-d use default branch names

-f force

Initialize a new git repo with support for the branching model.
Feature
git flow feature [list] [-v]

-v verbose (more) output

Lists existing features
git flow feature start [-F] <name> [<base>]

-F fetch from $ORIGIN before performing local operation

Start new feature <name>, optionally basing it on <base> instead of <develop>
git flow feature finish [-rFkDS] <name|nameprefix>

-r rebase instead of merge

-F fetch from $ORIGIN before performing finish

-k keep branch after performing finish

-D force delete feature branch after finish


-S squash feature during merge

Finish feature <name>
git flow feature publish <name>

Start sharing feature <name> on $ORIGIN
git flow feature track <name>

Start tracking feature <name> that is shared on $ORIGIN
git flow feature diff [<name|nameprefix>]

Show all changes in <name> that are not in <develop>
git flow feature rebase [-i] [<name|nameprefix>]

-i do an interactive rebase

Rebase <name> on <develop>
git flow feature checkout [<name|nameprefix>]

Switch to feature branch <name>
git flow feature pull <remote> [<name>]

Pull feature <name> from <remote>
Release
git flow release [list] [-v]

-v verbose (more) output

Lists existing releases
git flow release start [-F] <version>

-F fetch from $ORIGIN before performing local operation

Start new release named <version>
git flow release finish [-Fsumpkn] <version>

-F fetch from $ORIGIN before performing finish

-s sign the release tag cryptographically

-u use the given GPG-key for the digital signature (implies -s)

-m use the given tag message

-p push to $ORIGIN after performing finish

-k keep branch after performing finish

-n don't tag this release

-S squash release during merge

Finish release <version>
git flow release publish <name>

Start sharing release <name> on $ORIGIN
git flow release track <name>

Start tracking release <name> that is shared on $ORIGIN
Hotfix
git flow hotfix [list] [-v]

-v verbose (more) output

Lists existing hotfixes
git flow hotfix start [-F] <version> [<base>]

-F fetch from $ORIGIN before performing local operation

Start new hotfix named <version>, optionally base it on <base> instead of <master>
git flow hotfix finish [-Fsumpkn] <version>

-F fetch from $ORIGIN before performing finish

-s sign the release tag cryptographically

-u use the given GPG-key for the digital signature (implies -s)

-m use the given tag message

-p push to $ORIGIN after performing finish

-k keep branch after performing finish

-n don't tag this release

Finish hotfix <version>
Support
git flow support [list] [-v]

-v verbose (more) output

Lists existing support branches
git flow support start [-F] <version> <base>

-F fetch from $ORIGIN before performing local operation

Start new support branch named <version> based on <base>
Configuration
Setting a different remote repo

A remote repo different from origin can be specified in the config file:

$ git config gitflow.origin myorigin
Default to fetching before local operations

If you always want to fetch from $ORIGIN before certain operations, for example before starting a feature:

$ git config gitflow.feature.start.fetch true

This can still be overridden on the command line by supplying the --nofetch argument.


======================================================================================

# Make a fresh clone of YOUR_REPO
git clone YOUR_REPO
cd YOUR_REPO

# Create tracking branches of all branches
for remote in `git branch -r | grep -v /HEAD`; do git checkout --track $remote ; done

# Remove DIRECTORY_NAME from all commits, then remove the refs to the old commits
# (repeat these two commands for as many directories that you want to remove)
git filter-branch --index-filter 'git rm -rf --cached --ignore-unmatch DIRECTORY_NAME/' --prune-empty --tag-name-filter cat -- --all
git for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git update-ref -d

# Ensure all old refs are fully removed
rm -Rf .git/logs .git/refs/original

# Perform a garbage collection to remove commits with no refs
git gc --prune=all --aggressive

# Force push all branches to overwrite their history
# (use with caution!)
git push origin --all --force
git push origin --tags --force



Redmine
Redmine redmine - Configuração de ant para IC com Jenkins

Favor avaliar as alterações Realizadas para integração contínua via jenkins.

- Os Jobs Configurados se encontram em java.jenkins.mj.gov.br
- O acesso ao artifactory será pelo link artifactory.mj.gov.br e a partir do login com usuário e senha de rede, será possível acessar os repositórios.
- Para execução local poderá ser utilizada a task ant package que não realiza a publicação do artefato no artifactory. Do contrário poderá ser utilizada a configuração da tarefa publish para publicação no artifactory
- O desenvolvedor deverá criar o arquivo ivysettings.xml conforme orientado no readme do projeto
- A próxima entrega da Stefanini para CGTI deverá ser realizada no branch GQUAL
- O 'build' em desenvolvimento é disparado a partir do commit no branch master do repositório da Stefanini
